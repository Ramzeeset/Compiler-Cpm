#pragma once

#include <string>

inline std::string path_separator =
#ifdef _WIN32
        "\\";
#elif __unix__
        "/";
#else
        "";
#endif

inline std::string LIB = "#include <algorithm>\n"
                         "#include <iostream>\n"
                         "#include <variant>\n"
                         "#include <cassert>\n"
                         "\n"
                         "class mixed {\n"
                         "public:\n"
                         "    std::variant<int, double, std::string> storage;\n"
                         "\n"
                         "    mixed() = default;\n"
                         "\n"
                         "    mixed(std::string str) : storage(str) {}\n"
                         "\n"
                         "    mixed(int num) : storage(num) {}\n"
                         "\n"
                         "    mixed(double num) : storage(num) {}\n"
                         "\n"
                         "    mixed &operator=(std::string str) {\n"
                         "        storage = str;\n"
                         "        return *this;\n"
                         "    }\n"
                         "\n"
                         "    mixed &operator=(float num) {\n"
                         "        storage = num;\n"
                         "        return *this;\n"
                         "    }\n"
                         "\n"
                         "    mixed &operator=(int num) {\n"
                         "        storage = num;\n"
                         "        return *this;\n"
                         "    }\n"
                         "\n"
                         "    mixed &operator=(const mixed &other) = default;\n"
                         "\n"
                         "    friend mixed operator*(int lhs, const mixed &rhs);\n"
                         "\n"
                         "    friend mixed operator+(const mixed &lhs, const mixed &rhs);\n"
                         "\n"
                         "    friend mixed operator-(const mixed &lhs, const mixed &rhs);\n"
                         "};\n"
                         "\n"
                         "bool is_integer(const std::string &str) {\n"
                         "    size_t pos = 0;\n"
                         "    try {\n"
                         "        std::stoi(str, &pos);\n"
                         "        return pos == str.size();\n"
                         "    } catch (std::invalid_argument &e) {\n"
                         "        return false;\n"
                         "    }\n"
                         "}\n"
                         "\n"
                         "bool is_double(const std::string &str) {\n"
                         "    size_t pos = 0;\n"
                         "    try {\n"
                         "        std::stod(str, &pos);\n"
                         "        return pos == str.size();\n"
                         "    } catch (std::invalid_argument &e) {\n"
                         "        return false;\n"
                         "    }\n"
                         "}\n"
                         "\n"
                         "mixed operator+(const std::string &str, int num) {\n"
                         "    return str + std::to_string(num);\n"
                         "}\n"
                         "\n"
                         "mixed operator+(int num, const std::string &str) {\n"
                         "    return std::to_string(num) + str;\n"
                         "}\n"
                         "\n"
                         "mixed operator+(const std::string &str, double num) {\n"
                         "    return str + std::to_string(num);\n"
                         "}\n"
                         "\n"
                         "mixed operator+(double num, const std::string &str) {\n"
                         "    return std::to_string(num) + str;\n"
                         "}\n"
                         "\n"
                         "mixed operator-(const std::string &str, int num) {\n"
                         "    if (is_integer(str)) {\n"
                         "        return std::stoi(str) - num;\n"
                         "    } else if (is_double(str)) {\n"
                         "        return std::stod(str) - num;\n"
                         "    } else {\n"
                         "        return -num;\n"
                         "    }\n"
                         "}\n"
                         "\n"
                         "mixed operator-(const std::string &str, double num) {\n"
                         "    if (is_integer(str)) {\n"
                         "        return std::stoi(str) - num;\n"
                         "    } else if (is_double(str)) {\n"
                         "        return std::stod(str) - num;\n"
                         "    } else {\n"
                         "        return -num;\n"
                         "    }\n"
                         "}\n"
                         "\n"
                         "mixed operator-(int num, const std::string &str) {\n"
                         "    return -1 * (str - num);\n"
                         "}\n"
                         "\n"
                         "mixed operator-(double num, const std::string &str) {\n"
                         "    return -1 * (str - num);\n"
                         "}\n"
                         "\n"
                         "std::string operator-(const std::string &lhs, const std::string &rhs) {\n"
                         "    return \"\";\n"
                         "}\n"
                         "\n"
                         "std::string operator*(int lhs, const std::string &rhs) {\n"
                         "    return rhs;\n"
                         "}\n"
                         "\n"
                         "mixed operator*(int lhs, const mixed &rhs) {\n"
                         "    return std::visit([&lhs](auto &&arg){\n"
                         "        return mixed(lhs * arg);\n"
                         "    }, rhs.storage);\n"
                         "}\n"
                         "\n"
                         "mixed operator+(const mixed &lhs, const mixed &rhs) {\n"
                         "        return std::visit([](auto && lhs, auto &&rhs) {\n"
                         "            return mixed(lhs + rhs);\n"
                         "        }, lhs.storage, rhs.storage);\n"
                         "    }\n"
                         "\n"
                         "mixed operator-(const mixed &lhs, const mixed &rhs) {\n"
                         "        return std::visit([](auto &&lhs, auto &&rhs) {\n"
                         "            return mixed(lhs - rhs);\n"
                         "        }, lhs.storage, rhs.storage);\n"
                         "    }\n"
                         "\n"
                         "void print(const mixed &var) {\n"
                         "    std::visit([](auto &&arg){\n"
                         "        std::cout << arg << \"\\n\";\n"
                         "    }, var.storage);\n"
                         "}\n"
                         "\n"
                         "template<typename T>\n"
                         "void print(T t) {\n"
                         "    std::cout << t << \"\\n\";\n"
                         "}\n"
                         "\n"
                         "mixed input() {\n"
                         "    std::string str;\n"
                         "    std::cin >> str;\n"
                         "    if (is_integer(str)) {\n"
                         "        return std::stoi(str);\n"
                         "    } else if (is_double(str)) {\n"
                         "        return std::stod(str);\n"
                         "    } else {\n"
                         "        return str;\n"
                         "    }\n"
                         "}\n"
                         "\n"
                         "mixed input(const std::string &output) {\n"
                         "    std::cout << output;\n"
                         "    return input();\n"
                         "}\n"
                         "\n"
                         "#define var mixed\n"
                         "#define val const mixed";